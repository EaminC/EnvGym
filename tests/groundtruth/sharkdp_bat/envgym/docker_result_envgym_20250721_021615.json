{
  "timestamp": "20250721_021615",
  "dockerfile_path": "envgym/envgym.dockerfile",
  "image_name": "envgym_test_1753064174",
  "build": {
    "success": false,
    "stdout": "",
    "stderr": "#0 building with \"default\" instance using docker driver\n\n#1 [internal] load build definition from envgym.dockerfile\n#1 transferring dockerfile: 3.33kB done\n#1 DONE 0.0s\n\n#2 [internal] load metadata for docker.io/library/ubuntu:22.04\n#2 DONE 0.1s\n\n#3 [internal] load .dockerignore\n#3 transferring context: 2B done\n#3 DONE 0.0s\n\n#4 [ 1/18] FROM docker.io/library/ubuntu:22.04@sha256:1ec65b2719518e27d4d25f104d93f9fac60dc437f81452302406825c46fcc9cb\n#4 DONE 0.0s\n\n#5 [ 3/18] RUN apt-get update &&     apt-get install -y --no-install-recommends       ca-certificates       curl       git       less       fzf       xclip       ripgrep       fd-find       ninja-build       libonig-dev       libgit2-dev       build-essential       pkg-config       libz-dev       clang       coreutils       zsh       fish       sudo       locales       bash-completion       gcc       libssl-dev       python3       python3-pip &&     rm -rf /var/lib/apt/lists/*\n#5 CACHED\n\n#6 [ 4/18] RUN locale-gen en_US.UTF-8\n#6 CACHED\n\n#7 [ 5/18] RUN useradd -m -u 1000 cc &&     usermod -aG sudo cc &&     echo \"cc ALL=(ALL) NOPASSWD:ALL\" >> /etc/sudoers\n#7 CACHED\n\n#8 [ 2/18] WORKDIR /home/cc/EnvGym/data/sharkdp_bat\n#8 CACHED\n\n#9 [ 6/18] WORKDIR /home/cc\n#9 CACHED\n\n#10 [ 7/18] RUN echo \"HOME is /home/cc\" &&     curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs -o /tmp/rustup.sh &&     ls -l /tmp/rustup.sh &&     head -20 /tmp/rustup.sh &&     cat /tmp/rustup.sh &&     sh -x /tmp/rustup.sh -y --no-modify-path\n#10 0.202 HOME is /home/cc\n#10 0.356 -rw-r--r-- 1 cc cc 28075 Jul 21 02:16 /tmp/rustup.sh\n#10 0.356 #!/bin/sh\n#10 0.356 # shellcheck shell=dash\n#10 0.356 # shellcheck disable=SC2039  # local is non-POSIX\n#10 0.356 \n#10 0.356 # This is just a little script that can be downloaded from the internet to\n#10 0.356 # install rustup. It just does platform detection, downloads the installer\n#10 0.356 # and runs it.\n#10 0.356 \n#10 0.356 # It runs on Unix shells like {a,ba,da,k,z}sh. It uses the common `local`\n#10 0.356 # extension. Note: Most shells limit `local` to 1 var per line, contra bash.\n#10 0.356 \n#10 0.356 # Some versions of ksh have no `local` keyword. Alias it to `typeset`, but\n#10 0.356 # beware this makes variables global with f()-style function syntax in ksh93.\n#10 0.356 # mksh has this alias by default.\n#10 0.356 has_local() {\n#10 0.356     # shellcheck disable=SC2034  # deliberately unused\n#10 0.356     local _has_local\n#10 0.356 }\n#10 0.356 \n#10 0.356 has_local 2>/dev/null || alias local=typeset\n#10 0.357 #!/bin/sh\n#10 0.357 # shellcheck shell=dash\n#10 0.357 # shellcheck disable=SC2039  # local is non-POSIX\n#10 0.357 \n#10 0.357 # This is just a little script that can be downloaded from the internet to\n#10 0.357 # install rustup. It just does platform detection, downloads the installer\n#10 0.357 # and runs it.\n#10 0.357 \n#10 0.357 # It runs on Unix shells like {a,ba,da,k,z}sh. It uses the common `local`\n#10 0.357 # extension. Note: Most shells limit `local` to 1 var per line, contra bash.\n#10 0.357 \n#10 0.357 # Some versions of ksh have no `local` keyword. Alias it to `typeset`, but\n#10 0.357 # beware this makes variables global with f()-style function syntax in ksh93.\n#10 0.357 # mksh has this alias by default.\n#10 0.357 has_local() {\n#10 0.357     # shellcheck disable=SC2034  # deliberately unused\n#10 0.357     local _has_local\n#10 0.357 }\n#10 0.357 \n#10 0.357 has_local 2>/dev/null || alias local=typeset\n#10 0.357 \n#10 0.357 is_zsh() {\n#10 0.357     [ -n \"${ZSH_VERSION-}\" ]\n#10 0.357 }\n#10 0.357 \n#10 0.357 set -u\n#10 0.357 \n#10 0.357 # If RUSTUP_UPDATE_ROOT is unset or empty, default it.\n#10 0.357 RUSTUP_UPDATE_ROOT=\"${RUSTUP_UPDATE_ROOT:-https://static.rust-lang.org/rustup}\"\n#10 0.357 # Set quiet as a global for ease of use\n#10 0.357 RUSTUP_QUIET=no\n#10 0.357 \n#10 0.357 # NOTICE: If you change anything here, please make the same changes in setup_mode.rs\n#10 0.357 usage() {\n#10 0.357     cat <<EOF\n#10 0.357 rustup-init 1.28.2 (d1f31992a 2025-04-28)\n#10 0.357 \n#10 0.357 The installer for rustup\n#10 0.357 \n#10 0.357 Usage: rustup-init[EXE] [OPTIONS]\n#10 0.357 \n#10 0.357 Options:\n#10 0.357   -v, --verbose\n#10 0.357           Set log level to 'DEBUG' if 'RUSTUP_LOG' is unset\n#10 0.357   -q, --quiet\n#10 0.357           Disable progress output, set log level to 'WARN' if 'RUSTUP_LOG' is unset\n#10 0.357   -y\n#10 0.357           Disable confirmation prompt\n#10 0.357       --default-host <DEFAULT_HOST>\n#10 0.357           Choose a default host triple\n#10 0.357       --default-toolchain <DEFAULT_TOOLCHAIN>\n#10 0.357           Choose a default toolchain to install. Use 'none' to not install any toolchains at all\n#10 0.357       --profile <PROFILE>\n#10 0.357           [default: default] [possible values: minimal, default, complete]\n#10 0.357   -c, --component <COMPONENT>\n#10 0.357           Comma-separated list of component names to also install\n#10 0.357   -t, --target <TARGET>\n#10 0.357           Comma-separated list of target names to also install\n#10 0.357       --no-update-default-toolchain\n#10 0.357           Don't update any existing default toolchain after install\n#10 0.357       --no-modify-path\n#10 0.357           Don't configure the PATH environment variable\n#10 0.357   -h, --help\n#10 0.357           Print help\n#10 0.357   -V, --version\n#10 0.357           Print version\n#10 0.357 EOF\n#10 0.357 }\n#10 0.357 \n#10 0.357 main() {\n#10 0.357     downloader --check\n#10 0.357     need_cmd uname\n#10 0.357     need_cmd mktemp\n#10 0.357     need_cmd chmod\n#10 0.357     need_cmd mkdir\n#10 0.357     need_cmd rm\n#10 0.357     need_cmd rmdir\n#10 0.357 \n#10 0.357     get_architecture || return 1\n#10 0.357     local _arch=\"$RETVAL\"\n#10 0.357     assert_nz \"$_arch\" \"arch\"\n#10 0.357 \n#10 0.357     local _ext=\"\"\n#10 0.357     case \"$_arch\" in\n#10 0.357         *windows*)\n#10 0.357             _ext=\".exe\"\n#10 0.357             ;;\n#10 0.357     esac\n#10 0.357 \n#10 0.357     local _url\n#10 0.357     if [ \"${RUSTUP_VERSION+set}\" = 'set' ]; then\n#10 0.357         say \"\\`RUSTUP_VERSION\\` has been set to \\`${RUSTUP_VERSION}\\`\"\n#10 0.357         _url=\"${RUSTUP_UPDATE_ROOT}/archive/${RUSTUP_VERSION}\"\n#10 0.357     else\n#10 0.357         _url=\"${RUSTUP_UPDATE_ROOT}/dist\"\n#10 0.357     fi\n#10 0.357     _url=\"${_url}/${_arch}/rustup-init${_ext}\"\n#10 0.357 \n#10 0.357 \n#10 0.357     local _dir\n#10 0.357     if ! _dir=\"$(ensure mktemp -d)\"; then\n#10 0.357         # Because the previous command ran in a subshell, we must manually\n#10 0.357         # propagate exit status.\n#10 0.357         exit 1\n#10 0.357     fi\n#10 0.357     local _file=\"${_dir}/rustup-init${_ext}\"\n#10 0.357 \n#10 0.357     local _ansi_escapes_are_valid=false\n#10 0.357     if [ -t 2 ]; then\n#10 0.357         if [ \"${TERM+set}\" = 'set' ]; then\n#10 0.357             case \"$TERM\" in\n#10 0.357                 xterm*|rxvt*|urxvt*|linux*|vt*)\n#10 0.357                     _ansi_escapes_are_valid=true\n#10 0.357                 ;;\n#10 0.357             esac\n#10 0.357         fi\n#10 0.357     fi\n#10 0.357 \n#10 0.357     # check if we have to use /dev/tty to prompt the user\n#10 0.357     local need_tty=yes\n#10 0.357     for arg in \"$@\"; do\n#10 0.357         case \"$arg\" in\n#10 0.357             --help)\n#10 0.357                 usage\n#10 0.357                 exit 0\n#10 0.357                 ;;\n#10 0.357             --quiet)\n#10 0.357                 RUSTUP_QUIET=yes\n#10 0.357                 ;;\n#10 0.357             *)\n#10 0.357                 OPTIND=1\n#10 0.357                 if [ \"${arg%%--*}\" = \"\" ]; then\n#10 0.357                     # Long option (other than --help);\n#10 0.357                     # don't attempt to interpret it.\n#10 0.357                     continue\n#10 0.357                 fi\n#10 0.357                 while getopts :hqy sub_arg \"$arg\"; do\n#10 0.357                     case \"$sub_arg\" in\n#10 0.357                         h)\n#10 0.357                             usage\n#10 0.357                             exit 0\n#10 0.357                             ;;\n#10 0.357                         q)\n#10 0.357                             RUSTUP_QUIET=yes\n#10 0.357                             ;;\n#10 0.357                         y)\n#10 0.357                             # user wants to skip the prompt --\n#10 0.357                             # we don't need /dev/tty\n#10 0.357                             need_tty=no\n#10 0.357                             ;;\n#10 0.357                         *)\n#10 0.357                             ;;\n#10 0.357                         esac\n#10 0.357                 done\n#10 0.357                 ;;\n#10 0.357         esac\n#10 0.357     done\n#10 0.357 \n#10 0.357     say 'downloading installer'\n#10 0.357 \n#10 0.357     ensure mkdir -p \"$_dir\"\n#10 0.357     ensure downloader \"$_url\" \"$_file\" \"$_arch\"\n#10 0.357     ensure chmod u+x \"$_file\"\n#10 0.357     if [ ! -x \"$_file\" ]; then\n#10 0.357         err \"Cannot execute $_file (likely because of mounting /tmp as noexec).\"\n#10 0.357         err \"Please copy the file to a location where you can execute binaries and run ./rustup-init${_ext}.\"\n#10 0.357         exit 1\n#10 0.357     fi\n#10 0.357 \n#10 0.357     if [ \"$need_tty\" = \"yes\" ] && [ ! -t 0 ]; then\n#10 0.357         # The installer is going to want to ask for confirmation by\n#10 0.357         # reading stdin.  This script was piped into `sh` though and\n#10 0.357         # doesn't have stdin to pass to its children. Instead we're going\n#10 0.357         # to explicitly connect /dev/tty to the installer's stdin.\n#10 0.357         if [ ! -t 1 ]; then\n#10 0.357             err \"Unable to run interactively. Run with -y to accept defaults, --help for additional options\"\n#10 0.357             exit 1;\n#10 0.357         fi\n#10 0.357 \n#10 0.357         ignore \"$_file\" \"$@\" < /dev/tty\n#10 0.357     else\n#10 0.357         ignore \"$_file\" \"$@\"\n#10 0.357     fi\n#10 0.357 \n#10 0.357     local _retval=$?\n#10 0.357 \n#10 0.357     ignore rm \"$_file\"\n#10 0.357     ignore rmdir \"$_dir\"\n#10 0.357 \n#10 0.357     return \"$_retval\"\n#10 0.357 }\n#10 0.357 \n#10 0.357 get_current_exe() {\n#10 0.357     # Returns the executable used for system architecture detection\n#10 0.357     # This is only run on Linux\n#10 0.357     local _current_exe\n#10 0.357     if test -L /proc/self/exe ; then\n#10 0.357         _current_exe=/proc/self/exe\n#10 0.357     else\n#10 0.357         warn \"Unable to find /proc/self/exe. System architecture detection might be inaccurate.\"\n#10 0.357         if test -n \"$SHELL\" ; then\n#10 0.357             _current_exe=$SHELL\n#10 0.357         else\n#10 0.357             need_cmd /bin/sh\n#10 0.357             _current_exe=/bin/sh\n#10 0.357         fi\n#10 0.357         warn \"Falling back to $_current_exe.\"\n#10 0.357     fi\n#10 0.357     echo \"$_current_exe\"\n#10 0.357 }\n#10 0.357 \n#10 0.357 get_bitness() {\n#10 0.357     need_cmd head\n#10 0.357     # Architecture detection without dependencies beyond coreutils.\n#10 0.357     # ELF files start out \"\\x7fELF\", and the following byte is\n#10 0.357     #   0x01 for 32-bit and\n#10 0.357     #   0x02 for 64-bit.\n#10 0.357     # The printf builtin on some shells like dash only supports octal\n#10 0.357     # escape sequences, so we use those.\n#10 0.357     local _current_exe=$1\n#10 0.357     local _current_exe_head\n#10 0.357     _current_exe_head=$(head -c 5 \"$_current_exe\")\n#10 0.357     if [ \"$_current_exe_head\" = \"$(printf '\\177ELF\\001')\" ]; then\n#10 0.357         echo 32\n#10 0.357     elif [ \"$_current_exe_head\" = \"$(printf '\\177ELF\\002')\" ]; then\n#10 0.357         echo 64\n#10 0.357     else\n#10 0.357         err \"unknown platform bitness\"\n#10 0.357         exit 1;\n#10 0.357     fi\n#10 0.357 }\n#10 0.357 \n#10 0.357 is_host_amd64_elf() {\n#10 0.357     local _current_exe=$1\n#10 0.357 \n#10 0.357     need_cmd head\n#10 0.357     need_cmd tail\n#10 0.357     # ELF e_machine detection without dependencies beyond coreutils.\n#10 0.357     # Two-byte field at offset 0x12 indicates the CPU,\n#10 0.357     # but we're interested in it being 0x3E to indicate amd64, or not that.\n#10 0.357     local _current_exe_machine\n#10 0.357     _current_exe_machine=$(head -c 19 \"$_current_exe\" | tail -c 1)\n#10 0.357     [ \"$_current_exe_machine\" = \"$(printf '\\076')\" ]\n#10 0.357 }\n#10 0.357 \n#10 0.357 get_endianness() {\n#10 0.357     local _current_exe=$1\n#10 0.357     local cputype=$2\n#10 0.357     local suffix_eb=$3\n#10 0.357     local suffix_el=$4\n#10 0.357 \n#10 0.357     # detect endianness without od/hexdump, like get_bitness() does.\n#10 0.357     need_cmd head\n#10 0.357     need_cmd tail\n#10 0.357 \n#10 0.357     local _current_exe_endianness\n#10 0.357     _current_exe_endianness=\"$(head -c 6 \"$_current_exe\" | tail -c 1)\"\n#10 0.357     if [ \"$_current_exe_endianness\" = \"$(printf '\\001')\" ]; then\n#10 0.357         echo \"${cputype}${suffix_el}\"\n#10 0.357     elif [ \"$_current_exe_endianness\" = \"$(printf '\\002')\" ]; then\n#10 0.357         echo \"${cputype}${suffix_eb}\"\n#10 0.357     else\n#10 0.357         err \"unknown platform endianness\"\n#10 0.357         exit 1\n#10 0.357     fi\n#10 0.357 }\n#10 0.357 \n#10 0.357 # Detect the Linux/LoongArch UAPI flavor, with all errors being non-fatal.\n#10 0.357 # Returns 0 or 234 in case of successful detection, 1 otherwise (/tmp being\n#10 0.357 # noexec, or other causes).\n#10 0.357 check_loongarch_uapi() {\n#10 0.357     need_cmd base64\n#10 0.357 \n#10 0.357     local _tmp\n#10 0.357     if ! _tmp=\"$(ensure mktemp)\"; then\n#10 0.357         return 1\n#10 0.357     fi\n#10 0.357 \n#10 0.357     # Minimal Linux/LoongArch UAPI detection, exiting with 0 in case of\n#10 0.357     # upstream (\"new world\") UAPI, and 234 (-EINVAL truncated) in case of\n#10 0.357     # old-world (as deployed on several early commercial Linux distributions\n#10 0.357     # for LoongArch).\n#10 0.357     #\n#10 0.357     # See https://gist.github.com/xen0n/5ee04aaa6cecc5c7794b9a0c3b65fc7f for\n#10 0.357     # source to this helper binary.\n#10 0.357     ignore base64 -d > \"$_tmp\" <<EOF\n#10 0.357 f0VMRgIBAQAAAAAAAAAAAAIAAgEBAAAAeAAgAAAAAABAAAAAAAAAAAAAAAAAAAAAQQAAAEAAOAAB\n#10 0.357 AAAAAAAAAAEAAAAFAAAAAAAAAAAAAAAAACAAAAAAAAAAIAAAAAAAJAAAAAAAAAAkAAAAAAAAAAAA\n#10 0.357 AQAAAAAABCiAAwUAFQAGABUAByCAAwsYggMAACsAC3iBAwAAKwAxen0n\n#10 0.357 EOF\n#10 0.357 \n#10 0.357     ignore chmod u+x \"$_tmp\"\n#10 0.357     if [ ! -x \"$_tmp\" ]; then\n#10 0.357         ignore rm \"$_tmp\"\n#10 0.357         return 1\n#10 0.357     fi\n#10 0.357 \n#10 0.357     \"$_tmp\"\n#10 0.357     local _retval=$?\n#10 0.357 \n#10 0.357     ignore rm \"$_tmp\"\n#10 0.357     return \"$_retval\"\n#10 0.357 }\n#10 0.357 \n#10 0.357 ensure_loongarch_uapi() {\n#10 0.357     check_loongarch_uapi\n#10 0.357     case $? in\n#10 0.357         0)\n#10 0.357             return 0\n#10 0.357             ;;\n#10 0.357         234)\n#10 0.357             err 'Your Linux kernel does not provide the ABI required by this Rust distribution.'\n#10 0.357             err 'Please check with your OS provider for how to obtain a compatible Rust package for your system.'\n#10 0.357             exit 1\n#10 0.357             ;;\n#10 0.357         *)\n#10 0.357             warn \"Cannot determine current system's ABI flavor, continuing anyway.\"\n#10 0.357             warn 'Note that the official Rust distribution only works with the upstream kernel ABI.'\n#10 0.357             warn 'Installation will fail if your running kernel happens to be incompatible.'\n#10 0.357             ;;\n#10 0.357     esac\n#10 0.357 }\n#10 0.357 \n#10 0.357 get_architecture() {\n#10 0.357     local _ostype _cputype _bitness _arch _clibtype\n#10 0.357     _ostype=\"$(uname -s)\"\n#10 0.357     _cputype=\"$(uname -m)\"\n#10 0.357     _clibtype=\"gnu\"\n#10 0.357 \n#10 0.357     if [ \"$_ostype\" = Linux ]; then\n#10 0.357         if [ \"$(uname -o)\" = Android ]; then\n#10 0.357             _ostype=Android\n#10 0.357         fi\n#10 0.357         if ldd --version 2>&1 | grep -q 'musl'; then\n#10 0.357             _clibtype=\"musl\"\n#10 0.357         fi\n#10 0.357     fi\n#10 0.357 \n#10 0.357     if [ \"$_ostype\" = Darwin ]; then\n#10 0.357         # Darwin `uname -m` can lie due to Rosetta shenanigans. If you manage to\n#10 0.357         # invoke a native shell binary and then a native uname binary, you can\n#10 0.357         # get the real answer, but that's hard to ensure, so instead we use\n#10 0.357         # `sysctl` (which doesn't lie) to check for the actual architecture.\n#10 0.357         if [ \"$_cputype\" = i386 ]; then\n#10 0.357             # Handling i386 compatibility mode in older macOS versions (<10.15)\n#10 0.357             # running on x86_64-based Macs.\n#10 0.357             # Starting from 10.15, macOS explicitly bans all i386 binaries from running.\n#10 0.357             # See: <https://support.apple.com/en-us/HT208436>\n#10 0.357 \n#10 0.357             # Avoid `sysctl: unknown oid` stderr output and/or non-zero exit code.\n#10 0.357             if sysctl hw.optional.x86_64 2> /dev/null || true | grep -q ': 1'; then\n#10 0.357                 _cputype=x86_64\n#10 0.357             fi\n#10 0.357         elif [ \"$_cputype\" = x86_64 ]; then\n#10 0.357             # Handling x86-64 compatibility mode (a.k.a. Rosetta 2)\n#10 0.357             # in newer macOS versions (>=11) running on arm64-based Macs.\n#10 0.357             # Rosetta 2 is built exclusively for x86-64 and cannot run i386 binaries.\n#10 0.357 \n#10 0.357             # Avoid `sysctl: unknown oid` stderr output and/or non-zero exit code.\n#10 0.357             if sysctl hw.optional.arm64 2> /dev/null || true | grep -q ': 1'; then\n#10 0.357                 _cputype=arm64\n#10 0.357             fi\n#10 0.357         fi\n#10 0.357     fi\n#10 0.357 \n#10 0.357     if [ \"$_ostype\" = SunOS ]; then\n#10 0.357         # Both Solaris and illumos presently announce as \"SunOS\" in \"uname -s\"\n#10 0.357         # so use \"uname -o\" to disambiguate.  We use the full path to the\n#10 0.357         # system uname in case the user has coreutils uname first in PATH,\n#10 0.357         # which has historically sometimes printed the wrong value here.\n#10 0.357         if [ \"$(/usr/bin/uname -o)\" = illumos ]; then\n#10 0.357             _ostype=illumos\n#10 0.357         fi\n#10 0.357 \n#10 0.357         # illumos systems have multi-arch userlands, and \"uname -m\" reports the\n#10 0.357         # machine hardware name; e.g., \"i86pc\" on both 32- and 64-bit x86\n#10 0.357         # systems.  Check for the native (widest) instruction set on the\n#10 0.357         # running kernel:\n#10 0.357         if [ \"$_cputype\" = i86pc ]; then\n#10 0.357             _cputype=\"$(isainfo -n)\"\n#10 0.357         fi\n#10 0.357     fi\n#10 0.357 \n#10 0.357     local _current_exe\n#10 0.357     case \"$_ostype\" in\n#10 0.357 \n#10 0.357         Android)\n#10 0.357             _ostype=linux-android\n#10 0.357             ;;\n#10 0.357 \n#10 0.357         Linux)\n#10 0.357             _current_exe=$(get_current_exe)\n#10 0.357             _ostype=unknown-linux-$_clibtype\n#10 0.357             _bitness=$(get_bitness \"$_current_exe\")\n#10 0.357             ;;\n#10 0.357 \n#10 0.357         FreeBSD)\n#10 0.357             _ostype=unknown-freebsd\n#10 0.357             ;;\n#10 0.357 \n#10 0.357         NetBSD)\n#10 0.357             _ostype=unknown-netbsd\n#10 0.357             ;;\n#10 0.357 \n#10 0.357         DragonFly)\n#10 0.357             _ostype=unknown-dragonfly\n#10 0.357             ;;\n#10 0.357 \n#10 0.357         Darwin)\n#10 0.357             _ostype=apple-darwin\n#10 0.357             ;;\n#10 0.357 \n#10 0.357         illumos)\n#10 0.357             _ostype=unknown-illumos\n#10 0.357             ;;\n#10 0.357 \n#10 0.357         MINGW* | MSYS* | CYGWIN* | Windows_NT)\n#10 0.357             _ostype=pc-windows-gnu\n#10 0.357             ;;\n#10 0.357 \n#10 0.357         *)\n#10 0.357             err \"unrecognized OS type: $_ostype\"\n#10 0.357             exit 1\n#10 0.357             ;;\n#10 0.357 \n#10 0.357     esac\n#10 0.357 \n#10 0.357     case \"$_cputype\" in\n#10 0.357 \n#10 0.357         i386 | i486 | i686 | i786 | x86)\n#10 0.357             _cputype=i686\n#10 0.357             ;;\n#10 0.357 \n#10 0.357         xscale | arm)\n#10 0.357             _cputype=arm\n#10 0.357             if [ \"$_ostype\" = \"linux-android\" ]; then\n#10 0.357                 _ostype=linux-androideabi\n#10 0.357             fi\n#10 0.357             ;;\n#10 0.357 \n#10 0.357         armv6l)\n#10 0.357             _cputype=arm\n#10 0.357             if [ \"$_ostype\" = \"linux-android\" ]; then\n#10 0.357                 _ostype=linux-androideabi\n#10 0.357             else\n#10 0.357                 _ostype=\"${_ostype}eabihf\"\n#10 0.357             fi\n#10 0.357             ;;\n#10 0.357 \n#10 0.357         armv7l | armv8l)\n#10 0.357             _cputype=armv7\n#10 0.357             if [ \"$_ostype\" = \"linux-android\" ]; then\n#10 0.357                 _ostype=linux-androideabi\n#10 0.357             else\n#10 0.357                 _ostype=\"${_ostype}eabihf\"\n#10 0.357             fi\n#10 0.357             ;;\n#10 0.357 \n#10 0.357         aarch64 | arm64)\n#10 0.357             _cputype=aarch64\n#10 0.357             ;;\n#10 0.357 \n#10 0.357         x86_64 | x86-64 | x64 | amd64)\n#10 0.357             _cputype=x86_64\n#10 0.357             ;;\n#10 0.357 \n#10 0.357         mips)\n#10 0.357             _cputype=$(get_endianness \"$_current_exe\" mips '' el)\n#10 0.357             ;;\n#10 0.357 \n#10 0.357         mips64)\n#10 0.357             if [ \"$_bitness\" -eq 64 ]; then\n#10 0.357                 # only n64 ABI is supported for now\n#10 0.357                 _ostype=\"${_ostype}abi64\"\n#10 0.357                 _cputype=$(get_endianness \"$_current_exe\" mips64 '' el)\n#10 0.357             fi\n#10 0.357             ;;\n#10 0.357 \n#10 0.357         ppc)\n#10 0.357             _cputype=powerpc\n#10 0.357             ;;\n#10 0.357 \n#10 0.357         ppc64)\n#10 0.357             _cputype=powerpc64\n#10 0.357             ;;\n#10 0.357 \n#10 0.357         ppc64le)\n#10 0.357             _cputype=powerpc64le\n#10 0.357             ;;\n#10 0.357 \n#10 0.357         s390x)\n#10 0.357             _cputype=s390x\n#10 0.357             ;;\n#10 0.357         riscv64)\n#10 0.357             _cputype=riscv64gc\n#10 0.357             ;;\n#10 0.357         loongarch64)\n#10 0.357             _cputype=loongarch64\n#10 0.357             ensure_loongarch_uapi\n#10 0.357             ;;\n#10 0.357         *)\n#10 0.357             err \"unknown CPU type: $_cputype\"\n#10 0.357             exit 1\n#10 0.357 \n#10 0.357     esac\n#10 0.357 \n#10 0.357     # Detect 64-bit linux with 32-bit userland\n#10 0.357     if [ \"${_ostype}\" = unknown-linux-gnu ] && [ \"${_bitness}\" -eq 32 ]; then\n#10 0.357         case $_cputype in\n#10 0.357             x86_64)\n#10 0.357                 if [ -n \"${RUSTUP_CPUTYPE:-}\" ]; then\n#10 0.357                     _cputype=\"$RUSTUP_CPUTYPE\"\n#10 0.357                 else {\n#10 0.357                     # 32-bit executable for amd64 = x32\n#10 0.357                     if is_host_amd64_elf \"$_current_exe\"; then {\n#10 0.357                         err \"This host is running an x32 userland, for which no native toolchain is provided.\"\n#10 0.357                         err \"You will have to install multiarch compatibility with i686 or amd64.\"\n#10 0.357                         err \"To do so, set the RUSTUP_CPUTYPE environment variable set to i686 or amd64 and re-run this script.\"\n#10 0.357                         err \"You will be able to add an x32 target after installation by running \\`rustup target add x86_64-unknown-linux-gnux32\\`.\"\n#10 0.357                          exit 1\n#10 0.357                     }; else\n#10 0.357                         _cputype=i686\n#10 0.357                     fi\n#10 0.357                 }; fi\n#10 0.357                 ;;\n#10 0.357             mips64)\n#10 0.357                 _cputype=$(get_endianness \"$_current_exe\" mips '' el)\n#10 0.357                 ;;\n#10 0.357             powerpc64)\n#10 0.357                 _cputype=powerpc\n#10 0.357                 ;;\n#10 0.357             aarch64)\n#10 0.357                 _cputype=armv7\n#10 0.357                 if [ \"$_ostype\" = \"linux-android\" ]; then\n#10 0.357                     _ostype=linux-androideabi\n#10 0.357                 else\n#10 0.357                     _ostype=\"${_ostype}eabihf\"\n#10 0.357                 fi\n#10 0.357                 ;;\n#10 0.357             riscv64gc)\n#10 0.357                 err \"riscv64 with 32-bit userland unsupported\"\n#10 0.357                 exit 1\n#10 0.357                 ;;\n#10 0.357         esac\n#10 0.357     fi\n#10 0.357 \n#10 0.357     # Detect armv7 but without the CPU features Rust needs in that build,\n#10 0.357     # and fall back to arm.\n#10 0.357     # See https://github.com/rust-lang/rustup.rs/issues/587.\n#10 0.357     if [ \"$_ostype\" = \"unknown-linux-gnueabihf\" ] && [ \"$_cputype\" = armv7 ]; then\n#10 0.357         if ! (ensure grep '^Features' /proc/cpuinfo | grep -E -q 'neon|simd') ; then\n#10 0.357             # Either `/proc/cpuinfo` is malformed or unavailable, or\n#10 0.357             # at least one processor does not have NEON (which is asimd on armv8+).\n#10 0.357             _cputype=arm\n#10 0.357         fi\n#10 0.357     fi\n#10 0.357 \n#10 0.357     _arch=\"${_cputype}-${_ostype}\"\n#10 0.357 \n#10 0.357     RETVAL=\"$_arch\"\n#10 0.357 }\n#10 0.357 \n#10 0.357 __print() {\n#10 0.357     if $_ansi_escapes_are_valid; then\n#10 0.357         printf '\\33[1m%s:\\33[0m %s\\n' \"$1\" \"$2\" >&2\n#10 0.357     else\n#10 0.357         printf '%s: %s\\n' \"$1\" \"$2\" >&2\n#10 0.357     fi\n#10 0.357 }\n#10 0.357 \n#10 0.357 warn() {\n#10 0.357     __print 'warn' \"$1\" >&2\n#10 0.357 }\n#10 0.357 \n#10 0.357 say() {\n#10 0.357     if [ \"$RUSTUP_QUIET\" = \"no\" ]; then\n#10 0.357         __print 'info' \"$1\" >&2\n#10 0.357     fi\n#10 0.357 }\n#10 0.357 \n#10 0.357 # NOTE: you are required to exit yourself\n#10 0.357 # we don't do it here because of multiline errors\n#10 0.357 err() {\n#10 0.357     __print 'error' \"$1\" >&2\n#10 0.357 }\n#10 0.357 \n#10 0.357 need_cmd() {\n#10 0.357     if ! check_cmd \"$1\"; then\n#10 0.357         err \"need '$1' (command not found)\"\n#10 0.357         exit 1\n#10 0.357     fi\n#10 0.357 }\n#10 0.357 \n#10 0.357 check_cmd() {\n#10 0.357     command -v \"$1\" > /dev/null 2>&1\n#10 0.357 }\n#10 0.357 \n#10 0.357 assert_nz() {\n#10 0.357     if [ -z \"$1\" ]; then\n#10 0.357         err \"assert_nz $2\"\n#10 0.357         exit 1\n#10 0.357     fi\n#10 0.357 }\n#10 0.357 \n#10 0.357 # Run a command that should never fail. If the command fails execution\n#10 0.357 # will immediately terminate with an error showing the failing\n#10 0.357 # command.\n#10 0.357 ensure() {\n#10 0.357     if ! \"$@\"; then\n#10 0.357         err \"command failed: $*\"\n#10 0.357         exit 1\n#10 0.357     fi\n#10 0.357 }\n#10 0.357 \n#10 0.357 # This is just for indicating that commands' results are being\n#10 0.357 # intentionally ignored. Usually, because it's being executed\n#10 0.357 # as part of error handling.\n#10 0.357 ignore() {\n#10 0.357     \"$@\"\n#10 0.357 }\n#10 0.357 \n#10 0.357 # This wraps curl or wget. Try curl first, if not installed,\n#10 0.357 # use wget instead.\n#10 0.357 downloader() {\n#10 0.357     # zsh does not split words by default, Required for curl retry arguments below.\n#10 0.357     is_zsh && setopt local_options shwordsplit\n#10 0.357 \n#10 0.357     local _dld\n#10 0.357     local _ciphersuites\n#10 0.357     local _err\n#10 0.357     local _status\n#10 0.357     local _retry\n#10 0.357     if check_cmd curl; then\n#10 0.357         _dld=curl\n#10 0.357     elif check_cmd wget; then\n#10 0.357         _dld=wget\n#10 0.357     else\n#10 0.357         _dld='curl or wget' # to be used in error message of need_cmd\n#10 0.357     fi\n#10 0.357 \n#10 0.357     if [ \"$1\" = --check ]; then\n#10 0.357         need_cmd \"$_dld\"\n#10 0.357     elif [ \"$_dld\" = curl ]; then\n#10 0.357         check_curl_for_retry_support\n#10 0.357         _retry=\"$RETVAL\"\n#10 0.357         get_ciphersuites_for_curl\n#10 0.357         _ciphersuites=\"$RETVAL\"\n#10 0.357         if [ -n \"$_ciphersuites\" ]; then\n#10 0.357             # shellcheck disable=SC2086\n#10 0.357             _err=$(curl $_retry --proto '=https' --tlsv1.2 --ciphers \"$_ciphersuites\" --silent --show-error --fail --location \"$1\" --output \"$2\" 2>&1)\n#10 0.357             _status=$?\n#10 0.357         else\n#10 0.357             warn \"Not enforcing strong cipher suites for TLS, this is potentially less secure\"\n#10 0.357             if ! check_help_for \"$3\" curl --proto --tlsv1.2; then\n#10 0.357                 warn \"Not enforcing TLS v1.2, this is potentially less secure\"\n#10 0.357                 # shellcheck disable=SC2086\n#10 0.357                 _err=$(curl $_retry --silent --show-error --fail --location \"$1\" --output \"$2\" 2>&1)\n#10 0.357                 _status=$?\n#10 0.357             else\n#10 0.357                 # shellcheck disable=SC2086\n#10 0.357                 _err=$(curl $_retry --proto '=https' --tlsv1.2 --silent --show-error --fail --location \"$1\" --output \"$2\" 2>&1)\n#10 0.357                 _status=$?\n#10 0.357             fi\n#10 0.357         fi\n#10 0.357         if [ -n \"$_err\" ]; then\n#10 0.357             warn \"$_err\"\n#10 0.357             if echo \"$_err\" | grep -q 404$; then\n#10 0.357                 err \"installer for platform '$3' not found, this may be unsupported\"\n#10 0.357                 exit 1\n#10 0.357             fi\n#10 0.357         fi\n#10 0.357         return $_status\n#10 0.357     elif [ \"$_dld\" = wget ]; then\n#10 0.357         if [ \"$(wget -V 2>&1|head -2|tail -1|cut -f1 -d\" \")\" = \"BusyBox\" ]; then\n#10 0.357             warn \"using the BusyBox version of wget.  Not enforcing strong cipher suites for TLS or TLS v1.2, this is potentially less secure\"\n#10 0.357             _err=$(wget \"$1\" -O \"$2\" 2>&1)\n#10 0.357             _status=$?\n#10 0.357         else\n#10 0.357             get_ciphersuites_for_wget\n#10 0.357             _ciphersuites=\"$RETVAL\"\n#10 0.357             if [ -n \"$_ciphersuites\" ]; then\n#10 0.357                 _err=$(wget --https-only --secure-protocol=TLSv1_2 --ciphers \"$_ciphersuites\" \"$1\" -O \"$2\" 2>&1)\n#10 0.357                 _status=$?\n#10 0.357             else\n#10 0.357                 warn \"Not enforcing strong cipher suites for TLS, this is potentially less secure\"\n#10 0.357                 if ! check_help_for \"$3\" wget --https-only --secure-protocol; then\n#10 0.357                     warn \"Not enforcing TLS v1.2, this is potentially less secure\"\n#10 0.357                     _err=$(wget \"$1\" -O \"$2\" 2>&1)\n#10 0.357                     _status=$?\n#10 0.357                 else\n#10 0.357                     _err=$(wget --https-only --secure-protocol=TLSv1_2 \"$1\" -O \"$2\" 2>&1)\n#10 0.357                     _status=$?\n#10 0.357                 fi\n#10 0.357             fi\n#10 0.357         fi\n#10 0.357         if [ -n \"$_err\" ]; then\n#10 0.357             warn \"$_err\"\n#10 0.357             if echo \"$_err\" | grep -q ' 404 Not Found$'; then\n#10 0.357                 err \"installer for platform '$3' not found, this may be unsupported\"\n#10 0.357                 exit 1\n#10 0.357             fi\n#10 0.357         fi\n#10 0.357         return $_status\n#10 0.357     else\n#10 0.357         err \"Unknown downloader\"   # should not reach here\n#10 0.357         exit 1\n#10 0.357     fi\n#10 0.357 }\n#10 0.357 \n#10 0.357 check_help_for() {\n#10 0.357     local _arch\n#10 0.357     local _cmd\n#10 0.357     local _arg\n#10 0.357     _arch=\"$1\"\n#10 0.357     shift\n#10 0.357     _cmd=\"$1\"\n#10 0.357     shift\n#10 0.357 \n#10 0.357     local _category\n#10 0.357     if \"$_cmd\" --help | grep -q '\"--help all\"'; then\n#10 0.357       _category=\"all\"\n#10 0.357     else\n#10 0.357       _category=\"\"\n#10 0.357     fi\n#10 0.357 \n#10 0.357     case \"$_arch\" in\n#10 0.357 \n#10 0.357         *darwin*)\n#10 0.357         if check_cmd sw_vers; then\n#10 0.357             local _os_version\n#10 0.357             local _os_major\n#10 0.357             _os_version=$(sw_vers -productVersion)\n#10 0.357             _os_major=$(echo \"$_os_version\" | cut -d. -f1)\n#10 0.357             case $_os_major in\n#10 0.357                 10)\n#10 0.357                     # If we're running on macOS, older than 10.13, then we always\n#10 0.357                     # fail to find these options to force fallback\n#10 0.357                     if [ \"$(echo \"$_os_version\" | cut -d. -f2)\" -lt 13 ]; then\n#10 0.357                         # Older than 10.13\n#10 0.357                         warn \"Detected macOS platform older than 10.13\"\n#10 0.357                         return 1\n#10 0.357                     fi\n#10 0.357                     ;;\n#10 0.357                 *)\n#10 0.357                     if ! { [ \"$_os_major\" -eq \"$_os_major\" ] 2>/dev/null && [ \"$_os_major\" -ge 11 ]; }; then\n#10 0.357                         # Unknown product version, warn and continue\n#10 0.357                         warn \"Detected unknown macOS major version: $_os_version\"\n#10 0.357                         warn \"TLS capabilities detection may fail\"\n#10 0.357                     fi\n#10 0.357                     ;; # We assume that macOS v11+ will always be okay.\n#10 0.357             esac\n#10 0.357         fi\n#10 0.357         ;;\n#10 0.357 \n#10 0.357     esac\n#10 0.357 \n#10 0.357     for _arg in \"$@\"; do\n#10 0.357         if ! \"$_cmd\" --help \"$_category\" | grep -q -- \"$_arg\"; then\n#10 0.357             return 1\n#10 0.357         fi\n#10 0.357     done\n#10 0.357 \n#10 0.357     true # not strictly needed\n#10 0.357 }\n#10 0.357 \n#10 0.357 # Check if curl supports the --retry flag, then pass it to the curl invocation.\n#10 0.357 check_curl_for_retry_support() {\n#10 0.357     local _retry_supported=\"\"\n#10 0.357     # \"unspecified\" is for arch, allows for possibility old OS using macports, homebrew, etc.\n#10 0.357     if check_help_for \"notspecified\" \"curl\" \"--retry\"; then\n#10 0.357         _retry_supported=\"--retry 3\"\n#10 0.357         if check_help_for \"notspecified\" \"curl\" \"--continue-at\"; then\n#10 0.357             # \"-C -\" tells curl to automatically find where to resume the download when retrying.\n#10 0.357             _retry_supported=\"--retry 3 -C -\"\n#10 0.357         fi\n#10 0.357     fi\n#10 0.357 \n#10 0.357     RETVAL=\"$_retry_supported\"\n#10 0.357 }\n#10 0.357 \n#10 0.357 # Return cipher suite string specified by user, otherwise return strong TLS 1.2-1.3 cipher suites\n#10 0.357 # if support by local tools is detected. Detection currently supports these curl backends:\n#10 0.357 # GnuTLS and OpenSSL (possibly also LibreSSL and BoringSSL). Return value can be empty.\n#10 0.357 get_ciphersuites_for_curl() {\n#10 0.357     if [ -n \"${RUSTUP_TLS_CIPHERSUITES-}\" ]; then\n#10 0.357         # user specified custom cipher suites, assume they know what they're doing\n#10 0.357         RETVAL=\"$RUSTUP_TLS_CIPHERSUITES\"\n#10 0.357         return\n#10 0.357     fi\n#10 0.357 \n#10 0.357     local _openssl_syntax=\"no\"\n#10 0.357     local _gnutls_syntax=\"no\"\n#10 0.357     local _backend_supported=\"yes\"\n#10 0.357     if curl -V | grep -q ' OpenSSL/'; then\n#10 0.357         _openssl_syntax=\"yes\"\n#10 0.357     elif curl -V | grep -iq ' LibreSSL/'; then\n#10 0.357         _openssl_syntax=\"yes\"\n#10 0.357     elif curl -V | grep -iq ' BoringSSL/'; then\n#10 0.357         _openssl_syntax=\"yes\"\n#10 0.357     elif curl -V | grep -iq ' GnuTLS/'; then\n#10 0.357         _gnutls_syntax=\"yes\"\n#10 0.357     else\n#10 0.357         _backend_supported=\"no\"\n#10 0.357     fi\n#10 0.357 \n#10 0.357     local _args_supported=\"no\"\n#10 0.357     if [ \"$_backend_supported\" = \"yes\" ]; then\n#10 0.357         # \"unspecified\" is for arch, allows for possibility old OS using macports, homebrew, etc.\n#10 0.357         if check_help_for \"notspecified\" \"curl\" \"--tlsv1.2\" \"--ciphers\" \"--proto\"; then\n#10 0.357             _args_supported=\"yes\"\n#10 0.357         fi\n#10 0.357     fi\n#10 0.357 \n#10 0.357     local _cs=\"\"\n#10 0.357     if [ \"$_args_supported\" = \"yes\" ]; then\n#10 0.357         if [ \"$_openssl_syntax\" = \"yes\" ]; then\n#10 0.357             _cs=$(get_strong_ciphersuites_for \"openssl\")\n#10 0.357         elif [ \"$_gnutls_syntax\" = \"yes\" ]; then\n#10 0.357             _cs=$(get_strong_ciphersuites_for \"gnutls\")\n#10 0.357         fi\n#10 0.357     fi\n#10 0.357 \n#10 0.357     RETVAL=\"$_cs\"\n#10 0.357 }\n#10 0.357 \n#10 0.357 # Return cipher suite string specified by user, otherwise return strong TLS 1.2-1.3 cipher suites\n#10 0.357 # if support by local tools is detected. Detection currently supports these wget backends:\n#10 0.357 # GnuTLS and OpenSSL (possibly also LibreSSL and BoringSSL). Return value can be empty.\n#10 0.357 get_ciphersuites_for_wget() {\n#10 0.357     if [ -n \"${RUSTUP_TLS_CIPHERSUITES-}\" ]; then\n#10 0.357         # user specified custom cipher suites, assume they know what they're doing\n#10 0.357         RETVAL=\"$RUSTUP_TLS_CIPHERSUITES\"\n#10 0.357         return\n#10 0.357     fi\n#10 0.357 \n#10 0.357     local _cs=\"\"\n#10 0.357     if wget -V | grep -q '\\-DHAVE_LIBSSL'; then\n#10 0.357         # \"unspecified\" is for arch, allows for possibility old OS using macports, homebrew, etc.\n#10 0.357         if check_help_for \"notspecified\" \"wget\" \"TLSv1_2\" \"--ciphers\" \"--https-only\" \"--secure-protocol\"; then\n#10 0.357             _cs=$(get_strong_ciphersuites_for \"openssl\")\n#10 0.357         fi\n#10 0.357     elif wget -V | grep -q '\\-DHAVE_LIBGNUTLS'; then\n#10 0.357         # \"unspecified\" is for arch, allows for possibility old OS using macports, homebrew, etc.\n#10 0.357         if check_help_for \"notspecified\" \"wget\" \"TLSv1_2\" \"--ciphers\" \"--https-only\" \"--secure-protocol\"; then\n#10 0.357             _cs=$(get_strong_ciphersuites_for \"gnutls\")\n#10 0.357         fi\n#10 0.357     fi\n#10 0.357 \n#10 0.357     RETVAL=\"$_cs\"\n#10 0.357 }\n#10 0.357 \n#10 0.357 # Return strong TLS 1.2-1.3 cipher suites in OpenSSL or GnuTLS syntax. TLS 1.2\n#10 0.357 # excludes non-ECDHE and non-AEAD cipher suites. DHE is excluded due to bad\n#10 0.357 # DH params often found on servers (see RFC 7919). Sequence matches or is\n#10 0.357 # similar to Firefox 68 ESR with weak cipher suites disabled via about:config.\n#10 0.357 # $1 must be openssl or gnutls.\n#10 0.357 get_strong_ciphersuites_for() {\n#10 0.357     if [ \"$1\" = \"openssl\" ]; then\n#10 0.357         # OpenSSL is forgiving of unknown values, no problems with TLS 1.3 values on versions that don't support it yet.\n#10 0.357         echo \"TLS_AES_128_GCM_SHA256:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_256_GCM_SHA384:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384\"\n#10 0.357     elif [ \"$1\" = \"gnutls\" ]; then\n#10 0.357         # GnuTLS isn't forgiving of unknown values, so this may require a GnuTLS version that supports TLS 1.3 even if wget doesn't.\n#10 0.357         # Begin with SECURE128 (and higher) then remove/add to build cipher suites. Produces same 9 cipher suites as OpenSSL but in slightly different order.\n#10 0.357         echo \"SECURE128:-VERS-SSL3.0:-VERS-TLS1.0:-VERS-TLS1.1:-VERS-DTLS-ALL:-CIPHER-ALL:-MAC-ALL:-KX-ALL:+AEAD:+ECDHE-ECDSA:+ECDHE-RSA:+AES-128-GCM:+CHACHA20-POLY1305:+AES-256-GCM\"\n#10 0.357     fi\n#10 0.357 }\n#10 0.357 \n#10 0.357 set +u\n#10 0.357 case \"$RUSTUP_INIT_SH_PRINT\" in\n#10 0.357     arch | architecture)\n#10 0.357         get_architecture || exit 1\n#10 0.357         echo \"$RETVAL\"\n#10 0.357         ;;\n#10 0.357     *)\n#10 0.357         main \"$@\" || exit 1\n#10 0.357         ;;\n#10 0.357 esac\n#10 0.357 + has_local\n#10 0.357 + set -u\n#10 0.357 + RUSTUP_UPDATE_ROOT=https://static.rust-lang.org/rustup\n#10 0.357 + RUSTUP_QUIET=no\n#10 0.358 + set +u\n#10 0.358 + main -y --no-modify-path\n#10 0.358 + downloader --check\n#10 0.358 + is_zsh\n#10 0.358 + [ -n  ]\n#10 0.358 + local _dld\n#10 0.358 + local _ciphersuites\n#10 0.358 + local _err\n#10 0.358 + local _status\n#10 0.358 + local _retry\n#10 0.358 + check_cmd curl\n#10 0.358 + command -v curl\n#10 0.358 + _dld=curl\n#10 0.358 + [ --check = --check ]\n#10 0.358 + need_cmd curl\n#10 0.358 + check_cmd curl\n#10 0.358 + command -v curl\n#10 0.358 + need_cmd uname\n#10 0.358 + check_cmd uname\n#10 0.358 + command -v uname\n#10 0.358 + need_cmd mktemp\n#10 0.358 + check_cmd mktemp\n#10 0.358 + command -v mktemp\n#10 0.358 + need_cmd chmod\n#10 0.358 + check_cmd chmod\n#10 0.358 + command -v chmod\n#10 0.358 + need_cmd mkdir\n#10 0.358 + check_cmd mkdir\n#10 0.358 + command -v mkdir\n#10 0.358 + need_cmd rm\n#10 0.358 + check_cmd rm\n#10 0.358 + command -v rm\n#10 0.358 + need_cmd rmdir\n#10 0.358 + check_cmd rmdir\n#10 0.358 + command -v rmdir\n#10 0.358 + get_architecture\n#10 0.358 + local _ostype _cputype _bitness _arch _clibtype\n#10 0.358 + uname -s\n#10 0.359 + _ostype=Linux\n#10 0.359 + uname -m\n#10 0.360 + _cputype=x86_64\n#10 0.360 + _clibtype=gnu\n#10 0.360 + [ Linux = Linux ]\n#10 0.360 + uname -o\n#10 0.361 + [ GNU/Linux = Android ]\n#10 0.361 + ldd --version\n#10 0.361 + grep -q musl\n#10 0.362 + [ Linux = Darwin ]\n#10 0.362 + [ Linux = SunOS ]\n#10 0.362 + local _current_exe\n#10 0.362 + get_current_exe\n#10 0.362 + local _current_exe\n#10 0.362 + test -L /proc/self/exe\n#10 0.362 + _current_exe=/proc/self/exe\n#10 0.362 + echo /proc/self/exe\n#10 0.362 + _current_exe=/proc/self/exe\n#10 0.362 + _ostype=unknown-linux-gnu\n#10 0.362 + get_bitness /proc/self/exe\n#10 0.362 + need_cmd head\n#10 0.362 + check_cmd head\n#10 0.362 + command -v head\n#10 0.362 + local _current_exe=/proc/self/exe\n#10 0.362 + local _current_exe_head\n#10 0.363 + head -c 5 /proc/self/exe\n#10 0.363 + _current_exe_head=ELF\u0002\n#10 0.363 + printf \\177ELF\\001\n#10 0.363 + [ ELF\u0002 = ELF\u0001 ]\n#10 0.364 + printf \\177ELF\\002\n#10 0.364 + [ ELF\u0002 = ELF\u0002 ]\n#10 0.364 + echo 64\n#10 0.364 + _bitness=64\n#10 0.364 + _cputype=x86_64\n#10 0.364 + [ unknown-linux-gnu = unknown-linux-gnu ]\n#10 0.364 + [ 64 -eq 32 ]\n#10 0.364 + [ unknown-linux-gnu = unknown-linux-gnueabihf ]\n#10 0.364 + _arch=x86_64-unknown-linux-gnu\n#10 0.364 + RETVAL=x86_64-unknown-linux-gnu\n#10 0.364 + local _arch=x86_64-unknown-linux-gnu\n#10 0.364 + assert_nz x86_64-unknown-linux-gnu arch\n#10 0.364 + [ -z x86_64-unknown-linux-gnu ]\n#10 0.364 + local _ext=\n#10 0.364 + local _url\n#10 0.364 + [  = set ]\n#10 0.364 + _url=https://static.rust-lang.org/rustup/dist\n#10 0.364 + _url=https://static.rust-lang.org/rustup/dist/x86_64-unknown-linux-gnu/rustup-init\n#10 0.364 + local _dir\n#10 0.364 + ensure mktemp -d\n#10 0.364 + mktemp -d\n#10 0.365 + _dir=/tmp/tmp.41ZWaa19RR\n#10 0.365 + local _file=/tmp/tmp.41ZWaa19RR/rustup-init\n#10 0.365 + local _ansi_escapes_are_valid=false\n#10 0.365 + [ -t 2 ]\n#10 0.365 + local need_tty=yes\n#10 0.365 + OPTIND=1\n#10 0.365 + [ -y =  ]\n#10 0.365 + getopts :hqy sub_arg -y\n#10 0.365 + need_tty=no\n#10 0.365 + getopts :hqy sub_arg -y\n#10 0.365 + OPTIND=1\n#10 0.365 + [  =  ]\n#10 0.365 + continue\n#10 0.365 + say downloading installer\n#10 0.365 + [ no = no ]\n#10 0.365 + __print info downloading installer\n#10 0.365 + false\n#10 0.365 + printf %s: %s\\n info downloading installer\n#10 0.365 info: downloading installer\n#10 0.365 + ensure mkdir -p /tmp/tmp.41ZWaa19RR\n#10 0.365 + mkdir -p /tmp/tmp.41ZWaa19RR\n#10 0.365 + ensure downloader https://static.rust-lang.org/rustup/dist/x86_64-unknown-linux-gnu/rustup-init /tmp/tmp.41ZWaa19RR/rustup-init x86_64-unknown-linux-gnu\n#10 0.365 + downloader https://static.rust-lang.org/rustup/dist/x86_64-unknown-linux-gnu/rustup-init /tmp/tmp.41ZWaa19RR/rustup-init x86_64-unknown-linux-gnu\n#10 0.365 + is_zsh\n#10 0.365 + [ -n  ]\n#10 0.365 + local _dld\n#10 0.365 + local _ciphersuites\n#10 0.365 + local _err\n#10 0.365 + local _status\n#10 0.365 + local _retry\n#10 0.365 + check_cmd curl\n#10 0.365 + command -v curl\n#10 0.365 + _dld=curl\n#10 0.365 + [ https://static.rust-lang.org/rustup/dist/x86_64-unknown-linux-gnu/rustup-init = --check ]\n#10 0.365 + [ curl = curl ]\n#10 0.365 + check_curl_for_retry_support\n#10 0.365 + local _retry_supported=\n#10 0.365 + check_help_for notspecified curl --retry\n#10 0.365 + local _arch\n#10 0.365 + local _cmd\n#10 0.365 + local _arg\n#10 0.365 + _arch=notspecified\n#10 0.365 + shift\n#10 0.365 + _cmd=curl\n#10 0.365 + shift\n#10 0.365 + local _category\n#10 0.366 + curl --help\n#10 0.366 + grep -q \"--help all\"\n#10 0.370 + _category=all\n#10 0.370 + curl --help all\n#10 0.370 + grep -q -- --retry\n#10 0.374 + true\n#10 0.374 + _retry_supported=--retry 3\n#10 0.374 + check_help_for notspecified curl --continue-at\n#10 0.374 + local _arch\n#10 0.374 + local _cmd\n#10 0.374 + local _arg\n#10 0.374 + _arch=notspecified\n#10 0.374 + shift\n#10 0.374 + _cmd=curl\n#10 0.374 + shift\n#10 0.374 + local _category\n#10 0.374 + curl --help\n#10 0.374 + grep -q \"--help all\"\n#10 0.378 + _category=all\n#10 0.378 + curl --help all\n#10 0.378 + grep -q -- --continue-at\n#10 0.382 + true\n#10 0.382 + _retry_supported=--retry 3 -C -\n#10 0.382 + RETVAL=--retry 3 -C -\n#10 0.382 + _retry=--retry 3 -C -\n#10 0.382 + get_ciphersuites_for_curl\n#10 0.382 + [ -n  ]\n#10 0.382 + local _openssl_syntax=no\n#10 0.382 + local _gnutls_syntax=no\n#10 0.382 + local _backend_supported=yes\n#10 0.382 + curl -V\n#10 0.383 + grep -q  OpenSSL/\n#10 0.387 + _openssl_syntax=yes\n#10 0.387 + local _args_supported=no\n#10 0.387 + [ yes = yes ]\n#10 0.387 + check_help_for notspecified curl --tlsv1.2 --ciphers --proto\n#10 0.387 + local _arch\n#10 0.387 + local _cmd\n#10 0.387 + local _arg\n#10 0.387 + _arch=notspecified\n#10 0.387 + shift\n#10 0.387 + _cmd=curl\n#10 0.387 + shift\n#10 0.387 + local _category\n#10 0.387 + curl --help\n#10 0.387 + grep -q \"--help all\"\n#10 0.391 + _category=all\n#10 0.391 + curl --help all\n#10 0.391 + grep -q -- --tlsv1.2\n#10 0.395 + curl --help all\n#10 0.395 + grep -q -- --ciphers\n#10 0.400 + curl --help all\n#10 0.400 + grep -q -- --proto\n#10 0.404 + true\n#10 0.404 + _args_supported=yes\n#10 0.404 + local _cs=\n#10 0.404 + [ yes = yes ]\n#10 0.404 + [ yes = yes ]\n#10 0.404 + get_strong_ciphersuites_for openssl\n#10 0.405 + [ openssl = openssl ]\n#10 0.405 + echo TLS_AES_128_GCM_SHA256:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_256_GCM_SHA384:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384\n#10 0.405 + _cs=TLS_AES_128_GCM_SHA256:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_256_GCM_SHA384:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384\n#10 0.405 + RETVAL=TLS_AES_128_GCM_SHA256:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_256_GCM_SHA384:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384\n#10 0.405 + _ciphersuites=TLS_AES_128_GCM_SHA256:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_256_GCM_SHA384:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384\n#10 0.405 + [ -n TLS_AES_128_GCM_SHA256:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_256_GCM_SHA384:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384 ]\n#10 0.405 + curl --retry 3 -C - --proto =https --tlsv1.2 --ciphers TLS_AES_128_GCM_SHA256:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_256_GCM_SHA384:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384 --silent --show-error --fail --location https://static.rust-lang.org/rustup/dist/x86_64-unknown-linux-gnu/rustup-init --output /tmp/tmp.41ZWaa19RR/rustup-init\n#10 0.722 + _err=\n#10 0.722 + _status=0\n#10 0.722 + [ -n  ]\n#10 0.722 + return 0\n#10 0.722 + ensure chmod u+x /tmp/tmp.41ZWaa19RR/rustup-init\n#10 0.722 + chmod u+x /tmp/tmp.41ZWaa19RR/rustup-init\n#10 0.723 + [ ! -x /tmp/tmp.41ZWaa19RR/rustup-init ]\n#10 0.723 + [ no = yes ]\n#10 0.723 + ignore /tmp/tmp.41ZWaa19RR/rustup-init -y --no-modify-path\n#10 0.723 + /tmp/tmp.41ZWaa19RR/rustup-init -y --no-modify-path\n#10 0.734 error: could not create bin directory: '/home/cc/.cargo/bin': Permission denied (os error 13)\n#10 0.736 + local _retval=1\n#10 0.736 + ignore rm /tmp/tmp.41ZWaa19RR/rustup-init\n#10 0.736 + rm /tmp/tmp.41ZWaa19RR/rustup-init\n#10 0.740 + ignore rmdir /tmp/tmp.41ZWaa19RR\n#10 0.740 + rmdir /tmp/tmp.41ZWaa19RR\n#10 0.740 + return 1\n#10 0.740 + exit 1\n#10 ERROR: process \"/bin/sh -c echo \\\"HOME is $HOME\\\" &&     curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs -o /tmp/rustup.sh &&     ls -l /tmp/rustup.sh &&     head -20 /tmp/rustup.sh &&     cat /tmp/rustup.sh &&     sh -x /tmp/rustup.sh -y --no-modify-path\" did not complete successfully: exit code: 1\n------\n > [ 7/18] RUN echo \"HOME is /home/cc\" &&     curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs -o /tmp/rustup.sh &&     ls -l /tmp/rustup.sh &&     head -20 /tmp/rustup.sh &&     cat /tmp/rustup.sh &&     sh -x /tmp/rustup.sh -y --no-modify-path:\n0.723 + ignore /tmp/tmp.41ZWaa19RR/rustup-init -y --no-modify-path\n0.723 + /tmp/tmp.41ZWaa19RR/rustup-init -y --no-modify-path\n0.734 error: could not create bin directory: '/home/cc/.cargo/bin': Permission denied (os error 13)\n0.736 + local _retval=1\n0.736 + ignore rm /tmp/tmp.41ZWaa19RR/rustup-init\n0.736 + rm /tmp/tmp.41ZWaa19RR/rustup-init\n0.740 + ignore rmdir /tmp/tmp.41ZWaa19RR\n0.740 + rmdir /tmp/tmp.41ZWaa19RR\n0.740 + return 1\n0.740 + exit 1\n------\nenvgym.dockerfile:57\n--------------------\n  56 |     # Install Rust toolchain with rustup (diagnose curl download and run installer with default options)\n  57 | >>> RUN echo \"HOME is $HOME\" && \\\n  58 | >>>     curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs -o /tmp/rustup.sh && \\\n  59 | >>>     ls -l /tmp/rustup.sh && \\\n  60 | >>>     head -20 /tmp/rustup.sh && \\\n  61 | >>>     cat /tmp/rustup.sh && \\\n  62 | >>>     sh -x /tmp/rustup.sh -y --no-modify-path\n  63 |     \n--------------------\nERROR: failed to build: failed to solve: process \"/bin/sh -c echo \\\"HOME is $HOME\\\" &&     curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs -o /tmp/rustup.sh &&     ls -l /tmp/rustup.sh &&     head -20 /tmp/rustup.sh &&     cat /tmp/rustup.sh &&     sh -x /tmp/rustup.sh -y --no-modify-path\" did not complete successfully: exit code: 1\n"
  },
  "run": {
    "success": false,
    "stdout": "",
    "stderr": ""
  }
}
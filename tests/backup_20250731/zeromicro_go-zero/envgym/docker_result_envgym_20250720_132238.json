{
  "timestamp": "20250720_132238",
  "dockerfile_path": "envgym/envgym.dockerfile",
  "image_name": "envgym_test_1753017724",
  "build": {
    "success": false,
    "stdout": "",
    "stderr": "#0 building with \"default\" instance using docker driver\n\n#1 [internal] load build definition from envgym.dockerfile\n#1 transferring dockerfile: 2.36kB done\n#1 DONE 0.0s\n\n#2 [internal] load metadata for docker.io/library/golang:1.21-alpine3.18\n#2 DONE 0.1s\n\n#3 [internal] load metadata for docker.io/library/alpine:3.18\n#3 DONE 0.1s\n\n#4 [internal] load .dockerignore\n#4 transferring context: 111B done\n#4 DONE 0.0s\n\n#5 [stage-1 1/8] FROM docker.io/library/alpine:3.18@sha256:de0eb0b3f2a47ba1eb89389859a9bd88b28e82f5826b6969ad604979713c2d4f\n#5 DONE 0.0s\n\n#6 [builder  1/14] FROM docker.io/library/golang:1.21-alpine3.18@sha256:d390d5f2006c4c9cf19709d449a8463e7188643f444d06fcaa96f45b6c29363d\n#6 DONE 0.0s\n\n#7 [stage-1 2/8] RUN apk add --no-cache     bash     tzdata     ca-certificates     curl\n#7 CACHED\n\n#8 [stage-1 3/8] WORKDIR /home/cc/EnvGym/data/zeromicro_go-zero\n#8 CACHED\n\n#9 [builder  3/14] RUN apk add --no-cache     git     make     curl     tzdata     ca-certificates     protobuf     gcc     libc-dev\n#9 CACHED\n\n#10 [builder  4/14] RUN go version && go env\n#10 CACHED\n\n#11 [builder  2/14] WORKDIR /home/cc/EnvGym/data/zeromicro_go-zero\n#11 CACHED\n\n#12 [builder  5/14] RUN go install github.com/zeromicro/go-zero/tools/goctl@latest\n#12 CACHED\n\n#13 [internal] load build context\n#13 transferring context: 196.15kB 0.1s done\n#13 DONE 0.1s\n\n#14 [builder  6/14] RUN go env\n#14 0.202 GO111MODULE='on'\n#14 0.202 GOARCH='amd64'\n#14 0.202 GOBIN=''\n#14 0.202 GOCACHE='/root/.cache/go-build'\n#14 0.202 GOENV='/root/.config/go/env'\n#14 0.202 GOEXE=''\n#14 0.202 GOEXPERIMENT=''\n#14 0.202 GOFLAGS=''\n#14 0.202 GOHOSTARCH='amd64'\n#14 0.202 GOHOSTOS='linux'\n#14 0.202 GOINSECURE=''\n#14 0.202 GOMODCACHE='/go/pkg/mod'\n#14 0.202 GONOPROXY=''\n#14 0.202 GONOSUMDB=''\n#14 0.202 GOOS='linux'\n#14 0.202 GOPATH='/go'\n#14 0.202 GOPRIVATE=''\n#14 0.202 GOPROXY='https://proxy.golang.org,direct'\n#14 0.202 GOROOT='/usr/local/go'\n#14 0.202 GOSUMDB='sum.golang.org'\n#14 0.202 GOTMPDIR=''\n#14 0.202 GOTOOLCHAIN='local'\n#14 0.202 GOTOOLDIR='/usr/local/go/pkg/tool/linux_amd64'\n#14 0.202 GOVCS=''\n#14 0.202 GOVERSION='go1.21.10'\n#14 0.202 GCCGO='gccgo'\n#14 0.202 GOAMD64='v1'\n#14 0.202 AR='ar'\n#14 0.202 CC='gcc'\n#14 0.202 CXX='g++'\n#14 0.202 CGO_ENABLED='0'\n#14 0.202 GOMOD='/dev/null'\n#14 0.202 GOWORK=''\n#14 0.202 CGO_CFLAGS='-O2 -g'\n#14 0.202 CGO_CPPFLAGS=''\n#14 0.202 CGO_CXXFLAGS='-O2 -g'\n#14 0.202 CGO_FFLAGS='-O2 -g'\n#14 0.202 CGO_LDFLAGS='-O2 -g'\n#14 0.202 PKG_CONFIG='pkg-config'\n#14 0.202 GOGCCFLAGS='-fPIC -m64 -Wl,--no-gc-sections -fmessage-length=0 -ffile-prefix-map=/tmp/go-build702281886=/tmp/go-build -gno-record-gcc-switches'\n#14 DONE 0.2s\n\n#15 [builder  7/14] RUN GO111MODULE=on go install google.golang.org/protobuf/cmd/protoc-gen-go@v1.31.0\n#15 0.524 go: downloading google.golang.org/protobuf v1.31.0\n#15 DONE 4.7s\n\n#16 [builder  8/14] RUN GO111MODULE=on go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@v1.3.0\n#16 0.408 go: downloading google.golang.org/grpc/cmd/protoc-gen-go-grpc v1.3.0\n#16 0.409 go: downloading google.golang.org/grpc v1.3.0\n#16 0.815 go: downloading google.golang.org/protobuf v1.28.1\n#16 DONE 4.6s\n\n#17 [builder  9/14] COPY go.mod go.sum ./\n#17 DONE 0.0s\n\n#18 [builder 10/14] RUN go mod download\n#18 DONE 7.1s\n\n#19 [builder 11/14] COPY . .\n#19 DONE 0.3s\n\n#20 [builder 12/14] RUN go mod tidy\n#20 0.371 go: downloading gopkg.in/check.v1 v1.0.0-20201130134442-10cb98267c6c\n#20 0.371 go: downloading github.com/prashantv/gostub v1.1.0\n#20 0.374 go: downloading github.com/nbio/st v0.0.0-20140626010706-e9e8d9816f32\n#20 0.397 go: downloading github.com/bsm/ginkgo/v2 v2.12.0\n#20 0.397 go: downloading github.com/bsm/gomega v1.27.10\n#20 0.414 go: downloading github.com/pkg/errors v0.9.1\n#20 0.414 go: downloading github.com/benbjohnson/clock v1.1.0\n#20 0.436 go: downloading github.com/spf13/pflag v1.0.5\n#20 0.686 go: downloading github.com/kr/pretty v0.3.1\n#20 0.758 go: downloading github.com/onsi/ginkgo/v2 v2.13.0\n#20 0.758 go: downloading github.com/onsi/gomega v1.29.0\n#20 0.872 go: downloading github.com/rogpeppe/go-internal v1.10.0\n#20 0.872 go: downloading github.com/kr/text v0.2.0\n#20 1.265 go: downloading golang.org/x/tools v0.21.1-0.20240508182429-e35e4ccd0d2d\n#20 1.265 go: downloading github.com/google/pprof v0.0.0-20210720184732-4bb14d4b1be1\n#20 1.265 go: downloading github.com/go-task/slim-sprig v0.0.0-20230315185526-52ccab3ef572\n#20 DONE 2.4s\n\n#21 [builder 13/14] RUN go build -o bin/gateway ./gateway/server.go\n#21 12.80 # command-line-arguments\n#21 12.80 gateway/server.go:33:19: undefined: Upstream\n#21 12.80 gateway/server.go:44:22: undefined: GatewayConf\n#21 12.80 gateway/server.go:88:45: undefined: Upstream\n#21 12.80 gateway/server.go:92:13: undefined: Upstream\n#21 12.80 gateway/server.go:129:36: undefined: Upstream\n#21 12.80 gateway/server.go:179:43: undefined: HttpClientConf\n#21 12.80 gateway/server.go:218:36: undefined: Upstream\n#21 12.80 gateway/server.go:266:57: undefined: HttpClientConf\n#21 12.80 gateway/server.go:296:49: undefined: Upstream\n#21 ERROR: process \"/bin/sh -c go build -o bin/gateway ./gateway/server.go\" did not complete successfully: exit code: 1\n------\n > [builder 13/14] RUN go build -o bin/gateway ./gateway/server.go:\n12.80 # command-line-arguments\n12.80 gateway/server.go:33:19: undefined: Upstream\n12.80 gateway/server.go:44:22: undefined: GatewayConf\n12.80 gateway/server.go:88:45: undefined: Upstream\n12.80 gateway/server.go:92:13: undefined: Upstream\n12.80 gateway/server.go:129:36: undefined: Upstream\n12.80 gateway/server.go:179:43: undefined: HttpClientConf\n12.80 gateway/server.go:218:36: undefined: Upstream\n12.80 gateway/server.go:266:57: undefined: HttpClientConf\n12.80 gateway/server.go:296:49: undefined: Upstream\n------\nenvgym.dockerfile:42\n--------------------\n  40 |     \n  41 |     # Build the main application binaries as needed (example: gateway, mcp)\n  42 | >>> RUN go build -o bin/gateway ./gateway/server.go\n  43 |     RUN go build -o bin/mcp ./mcp/server.go\n  44 |     \n--------------------\nERROR: failed to build: failed to solve: process \"/bin/sh -c go build -o bin/gateway ./gateway/server.go\" did not complete successfully: exit code: 1\n"
  },
  "run": {
    "success": false,
    "stdout": "",
    "stderr": ""
  }
}
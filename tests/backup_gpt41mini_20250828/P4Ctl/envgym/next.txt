current progress  
- Dockerfile is based on Ubuntu 20.04, matching the plan's recommended OS.  
- Installed Python 3.8 (meets Python 3.7+ requirement), pip, and essential build tools including bison 3.8.x and flex.  
- Installed scapy 2.4.5 via pip as specified.  
- Installed nmap (includes ncat) and other dependencies such as llvm-10, clang-10, libelf-dev, linux headers, and make.  
- Created user `cc` and set working directory to `/home/cc/P4Ctl` inside container, consistent with the plan's working directory `/home/cc/EnvGym/data-gpt-4.1mini/P4Ctl` relative path (minor path difference noted).  
- Set python3 to point to python3.8 and upgraded pip tools.  
- Copied source files into container with proper ownership and made shell scripts executable.  
- Default command starts an interactive bash login shell.

next step  
- Adjust working directory inside Dockerfile to exactly `/home/cc/EnvGym/data-gpt-4.1mini/P4Ctl` to align fully with plan context.  
- Add installation steps for BCC compatible with Linux kernel 5.15.0 (currently missing).  
- Install Intel Tofino SDE 9.7.0 amd64 Linux version or add instructions to download and install it inside container or host.  
- Verify and if needed, install bison 3.8.2 and flex 2.6.4 specifically (ensure versions match plan exactly).  
- Add verification commands or scripts to confirm installed versions and environment variables (e.g., `SDE` and `SDE_INSTALL` exports) inside container.  
- Consider adding multi-core build support (`make -j$(nproc)`) in build scripts or Dockerfile build steps.  
- Include any required compilation and runtime dependencies for eBPF host agent and NetCL compiler if they are to be containerized.  
- Optionally add automation scripts or systemd service files setup steps if container will manage services.
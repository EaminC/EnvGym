{
  "timestamp": "20250828_043926",
  "dockerfile_path": "envgym/envgym.dockerfile",
  "image_name": "envgym_test_1756355963",
  "build": {
    "success": false,
    "stdout": "",
    "stderr": "#0 building with \"default\" instance using docker driver\n\n#1 [internal] load build definition from envgym.dockerfile\n#1 transferring dockerfile: 1.29kB done\n#1 DONE 0.0s\n\n#2 [internal] load metadata for docker.io/library/ubuntu:22.04\n#2 DONE 0.1s\n\n#3 [internal] load .dockerignore\n#3 transferring context: 2B done\n#3 DONE 0.1s\n\n#4 [ 1/16] FROM docker.io/library/ubuntu:22.04@sha256:1aa979d85661c488ce030ac292876cf6ed04535d3a237e49f61542d8e5de5ae0\n#4 DONE 0.0s\n\n#5 [ 4/16] RUN rustup install nightly\n#5 CACHED\n\n#6 [ 5/16] RUN rustc --version && cargo --version && rustc +nightly --version\n#6 CACHED\n\n#7 [ 7/16] WORKDIR /home/cc/EnvGym/data-gpt-4.1mini/tokio-rs_bytes\n#7 CACHED\n\n#8 [ 2/16] RUN apt-get update && apt-get install -y --no-install-recommends     curl     git     build-essential     ca-certificates     pkg-config     libssl-dev     llvm     clang     cmake     && rm -rf /var/lib/apt/lists/*\n#8 CACHED\n\n#9 [ 6/16] RUN useradd -m cc\n#9 CACHED\n\n#10 [ 9/16] RUN if [ ! -d \"/home/cc/EnvGym/data-gpt-4.1mini/tokio-rs_bytes/.git\" ]; then       git clone https://github.com/tokio-rs/bytes.git /home/cc/EnvGym/data-gpt-4.1mini/tokio-rs_bytes;     fi\n#10 CACHED\n\n#11 [ 3/16] RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain stable\n#11 CACHED\n\n#12 [ 8/16] RUN chown -R cc:cc /home/cc\n#12 CACHED\n\n#13 [10/16] WORKDIR /home/cc/EnvGym/data-gpt-4.1mini/tokio-rs_bytes\n#13 CACHED\n\n#14 [11/16] RUN cargo update\n#14 0.286     Updating crates.io index\n#14 0.337 warning: failed to write cache, path: /usr/local/cargo/registry/index/index.crates.io-1949cf8c6b5b557f/.cache/po/rt/portable-atomic, error: Permission denied (os error 13)\n#14 0.461      Locking 52 packages to latest compatible versions\n#14 DONE 0.5s\n\n#15 [12/16] RUN echo 'msrv = \"1.57\"' > clippy.toml\n#15 DONE 0.7s\n\n#16 [13/16] RUN mkdir -p .cargo && echo -e '[build]\\nrustflags = [\"--cfg\", \"docsrs\"]' > .cargo/config.toml\n#16 DONE 0.4s\n\n#17 [14/16] RUN cargo build --jobs $(nproc)\n#17 0.476     Updating crates.io index\n#17 0.543 warning: failed to write cache, path: /usr/local/cargo/registry/index/index.crates.io-1949cf8c6b5b557f/.cache/po/rt/portable-atomic, error: Permission denied (os error 13)\n#17 0.661    Compiling bytes v1.10.1 (/home/cc/EnvGym/data-gpt-4.1mini/tokio-rs_bytes)\n#17 0.714 error[E0554]: `#![feature]` may not be used on the stable release channel\n#17 0.714  --> src/lib.rs:7:21\n#17 0.714   |\n#17 0.714 7 | #![cfg_attr(docsrs, feature(doc_cfg))]\n#17 0.714   |                     ^^^^^^^^^^^^^^^^\n#17 0.714 \n#17 1.079 For more information about this error, try `rustc --explain E0554`.\n#17 1.085 error: could not compile `bytes` (lib) due to 1 previous error\n#17 ERROR: process \"/bin/bash -c cargo build --jobs $(nproc)\" did not complete successfully: exit code: 101\n------\n > [14/16] RUN cargo build --jobs $(nproc):\n0.543 warning: failed to write cache, path: /usr/local/cargo/registry/index/index.crates.io-1949cf8c6b5b557f/.cache/po/rt/portable-atomic, error: Permission denied (os error 13)\n0.661    Compiling bytes v1.10.1 (/home/cc/EnvGym/data-gpt-4.1mini/tokio-rs_bytes)\n0.714 error[E0554]: `#![feature]` may not be used on the stable release channel\n0.714  --> src/lib.rs:7:21\n0.714   |\n0.714 7 | #![cfg_attr(docsrs, feature(doc_cfg))]\n0.714   |                     ^^^^^^^^^^^^^^^^\n0.714 \n1.079 For more information about this error, try `rustc --explain E0554`.\n1.085 error: could not compile `bytes` (lib) due to 1 previous error\n------\nenvgym.dockerfile:48\n--------------------\n  46 |     RUN mkdir -p .cargo && echo -e '[build]\\nrustflags = [\"--cfg\", \"docsrs\"]' > .cargo/config.toml\n  47 |     \n  48 | >>> RUN cargo build --jobs $(nproc)\n  49 |     \n  50 |     RUN cargo test --jobs 1 --verbose || (echo \"Tests failed. Collecting logs:\" && cat target/debug/deps/* && false)\n--------------------\nERROR: failed to build: failed to solve: process \"/bin/bash -c cargo build --jobs $(nproc)\" did not complete successfully: exit code: 101\n"
  },
  "run": {
    "success": false,
    "stdout": "",
    "stderr": ""
  }
}